______ RAPPORT BENAIS-HUGOT ______

I- Description d'implémentation
	Partie Metier :
		-Tache :
			Les taches sont représentées dans une classe abstraite dans le but de ne pouvoir être instanciées

		-TachePonctuelle / TacheLongCours :
			Les taches sont instanciables via l'une des deux classes, dans le but de pouvoir gérer différement les deux types de tâches,
			de manière invisible pour nôtre collection de tâches.

		-CollectionTache :
			La classe permettant de gérer l'ensemble des tâches.

	Partie Graphique :
		-TodoList :
			La classe TodoList représente la fenêtre principale de l'affichage graphique; Elle permet l'affichage de la CollectionTache d'un utilisateur ainsi que sa gestion via 3 boutons :
				Ajouter Tache : Ouvre une fenêtre instance de CreerTache
				Modifier Tache : Ouvre une fenêtre instance de ModifTache
				Tache Archivées : Ouvre une fenêtre instance de TacheArchive

		-CreerTache :
			Une fenêtre contenant les différents champs nécessaire à l'instanciation d'une tâche
			Un bouton permettant la création d'une nouvelle tache pour notre CollectionTache

		-ModifTache :
			Une fenêtre contenant une liste cliquable des titres de nos taches initialisant les différents champs nécessaire à la modification de la tâche
			Un bouton permettant la validation de la modification

		-TacheArchive :


II- Choix effectués
	Partie Metier :
		-Categorisation : sujet respecté


		-Retard
			Le retard d'une tâche est représenté à l'affichage, onClick(redBackGround)


		-Serialization
			J'ai effectué la serialization dans un fichier texte, les données y sont représentées ainsi:
			Titre d'une TacheLongCours
			date_deb date_fin categorie avancement
			Titre d'une TachePonctuelle
			date_deb date_fin categorie
			...etc


		-Archivage
			L'archivage d'une tache ne s'effectue qu'après demande et confirmation du client
			La tâche est alors sérializée dans un fichier texte


III- Améliorations
